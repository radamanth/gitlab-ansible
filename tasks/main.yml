---
# this ensure that sendmail will be able to send you things.  The hostname should be qualified 
- name: edit etc host to add gitlab_domain
  replace: dest=/etc/hosts regexp='^127\.0\.0\.1.localhost$' replace='127.0.0.1 sendmail.{{gitlab_domain}} {{ansible_hostname}} localhost' owner=root group=root mode=0644 
  

- name: Check if GitLab configuration file already exists.
  stat: path=/etc/gitlab/gitlab.rb
  register: gitlab_config_file

- name: Install GitLab dependencies 
  apt: pkg={{ item }} state=installed update_cache=yes
  with_items:
    - curl 
    - openssh-server
    - postfix
    - git
    - jq

- name: Install Sendmail for GitLab 
  apt: pkg={{ item }} state=installed update_cache=yes force=yes
  with_items:
    - sendmail

- name: Ensure required directory exists 
  file: path={{item}}  state=directory owner={{gitlab_user}} group={{gitlab_group}} 
  with_items:
  - "{{gitlab_public_dir}}"
  - "/var/log/gitlab"

- name: Check if GitLab is already installed.
  stat: path=/usr/bin/gitlab-ctl
  register: gitlab_file

- name: Download GitLab .deb package .
  get_url: url={{ gitlab_package_url }}  dest=/tmp/gitlab.deb
  when: (gitlab_file.stat.exists == false) 

- name: Install GitLab .deb package.
  command: sudo dpkg -i /tmp/gitlab.deb
  when: (gitlab_file.stat.exists == false)

- name: Create GitLab SSL configuration folder.
  file: path={{gitlab_ssl_path}} state=directory  owner=root group=root mode=700
  when: gitlab_create_self_signed_cert

# 10 years self signed certificate shall cover our needs
- name: Create self-signed certificate.
  command: openssl req -new -nodes -x509 -subj "{{ gitlab_self_signed_cert_subj }}" -days 3650 -keyout {{ gitlab_ssl_certificate_key }} -out {{ gitlab_ssl_certificate }} -extensions v3_ca
    creates={{ gitlab_ssl_certificate }}
  when: gitlab_create_self_signed_cert

- name: Copy GitLab configuration file.
  template: src=gitlab.rb.j2   dest=/etc/gitlab/gitlab.rb  owner=root group=root mode=600
  notify: restart gitlab

- name: Ensure git user {{gitlab_use}} is in the group ({{gitlab_group}})
  user: name={{gitlab_user}} groups={{gitlab_group}} 


# Add users, groups and projects

- name: Ensure  Gitlab  is started
  command: gitlab-ctl reconfigure

- name : Retrieve root private token 
  shell : curl  http://localhost:{{gitlab_port}}/api/v3/session --data-urlencode 'login=root' --data-urlencode 'password={{gitlab_init_root_passwd}}' | jq --raw-output .private_token > ~/root_private_token 

- name: Assign private token  to a variable
  shell:
    cat ~/root_private_token 
  register: gitlab_root_private_token

# GITLAB GROUPS 
- name: Get existing Groups in gitlab instance
  uri:  url="http://localhost:{{gitlab_port}}/api/v3/groups"
        method=GET
        HEADER_PRIVATE-TOKEN="{{gitlab_root_private_token.stdout}}"
        HEADER_Content-Type="application/json"
        status_code=200
        return_content=yes
  register: gitlab_api_groups_result

- name: set Existing group path list
  set_fact: 
    gitlab_existing_group_path="{{gitlab_api_groups_result.json|map(attribute='path')|list|unique}}"

# - debug: var=gitlab_existing_group_path
      
- name: create groups
  uri:  url="http://localhost:{{gitlab_port}}/api/v3/groups"  
        method=POST  
        HEADER_PRIVATE-TOKEN="{{gitlab_root_private_token.stdout}}" 
        status_code=201
        return_content=yes
        body="{{item |  urlencode }}"
  register: created_groups
  when:  item.path not in gitlab_existing_group_path 
  with_items:
  - "{{gitlab_groups}}"
  
# - debug: var=created_groups

- name: ReGet existing Groups in gitlab instance
  uri:  url="http://localhost:{{gitlab_port}}/api/v3/groups"
        method=GET
        HEADER_PRIVATE-TOKEN="{{gitlab_root_private_token.stdout}}"
        HEADER_Content-Type="application/json"
        status_code=200
        return_content=yes
  register: gitlab_api_groups_result
  
- name: set Existing group path list
  set_fact: 
    gitlab_existing_group_path="{{gitlab_api_groups_result.json|map(attribute='path')|list|unique}}"

# - debug: var=gitlab_existing_group_path


# GITLAB PROJECTS 
- name: Get existing Projects  in gitlab instance
  uri:  url="http://localhost:{{gitlab_port}}/api/v3/projects"
        method=GET
        HEADER_PRIVATE-TOKEN="{{gitlab_root_private_token.stdout}}"
        HEADER_Content-Type="application/json"
        status_code=200
        return_content=yes
  register: gitlab_api_projects_result

# - debug: var=gitlab_api_projects_result.json

- name: set Existing projects name list
  set_fact: 
    gitlab_existing_projects_name="{{gitlab_api_projects_result.json|map(attribute='name')|list|unique}}"

# - debug: var=gitlab_existing_projects_name

- name: create projects
  uri:  url="http://localhost:{{gitlab_port}}/api/v3/projects"  
        method=POST  
        HEADER_PRIVATE-TOKEN="{{gitlab_root_private_token.stdout}}" 
        status_code=201
        return_content=yes
        body="{{item |  urlencode }}"
  register: created_projects
  when: item.name not in gitlab_existing_projects_name 
  with_items:
  - "{{gitlab_projects}}"
  
# - debug: var=created_projects

- name: ReGet existing Projects  in gitlab instance
  uri:  url="http://localhost:{{gitlab_port}}/api/v3/projects"
        method=GET
        HEADER_PRIVATE-TOKEN="{{gitlab_root_private_token.stdout}}"
        HEADER_Content-Type="application/json"
        status_code=200
        return_content=yes
  register: gitlab_api_projects_result

- name: set Existing projects name list
  set_fact: 
    gitlab_existing_projects_name="{{gitlab_api_projects_result.json|map(attribute='name')|list|unique}}"

# - debug: var=gitlab_existing_projects_name

# GITLAB USERS 
- name: Get existing Projects  in gitlab instance
  uri:  url="http://localhost:{{gitlab_port}}/api/v3/users"
        method=GET
        HEADER_PRIVATE-TOKEN="{{gitlab_root_private_token.stdout}}"
        HEADER_Content-Type="application/json"
        status_code=200
        return_content=yes
  register: gitlab_api_users_result

# - debug: var=gitlab_api_users_result.json

- name: set Existing username list
  set_fact: 
    gitlab_existing_users_name="{{gitlab_api_users_result.json|map(attribute='username')|list|unique}}"

# - debug: var=gitlab_existing_users_name

- name: create users
  uri:  url="http://localhost:{{gitlab_port}}/api/v3/users"  
        method=POST  
        HEADER_PRIVATE-TOKEN="{{gitlab_root_private_token.stdout}}" 
        status_code=201
        return_content=yes
        body="{{item |  urlencode }}"
  register: created_users
  when: item.username not in gitlab_existing_users_name
  with_items:
  - "{{gitlab_users}}"
  
- name: ReGet existing Projects  in gitlab instance
  uri:  url="http://localhost:{{gitlab_port}}/api/v3/users"
        method=GET
        HEADER_PRIVATE-TOKEN="{{gitlab_root_private_token.stdout}}"
        HEADER_Content-Type="application/json"
        status_code=200
        return_content=yes
  register: gitlab_api_users_result

# - debug: var=gitlab_api_users_result.json

- name: set Existing username list
  set_fact: 
    gitlab_existing_users_name="{{gitlab_api_users_result.json|map(attribute='username')|list|unique}}"

# - debug: var=gitlab_existing_users_name

# APACHE2 configuration 
- name: Enable security.conf
  command: a2enconf security

- name: Enable mod for apache2
  command: a2enmod {{item}}
  with_items:
  - rewrite
  - proxy
  - proxy_http
  - ssl
  - headers 

- name: Template VHOST 
  template: src=gitlab.conf.j2 dest=/etc/apache2/sites-available/gitlab.conf
  remote_user: root

- name: Enable  VHOST
  command: a2ensite gitlab.conf
  remote_user: root
  notify: restart apache2


 
